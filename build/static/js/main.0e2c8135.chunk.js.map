{"version":3,"sources":["Components/Container/Container.module.css","Components/Section/Section.module.css","Components/Container/Container.jsx","Components/Section/Section.jsx","redux/slices/contacts.js","Components/PhoneBookListItem/PhoneBookListItem.jsx","Components/PhoneBookList/PhoneBookList.jsx","Components/PhoneBookEditor/PhoneBookEditor.jsx","redux/slices/filter.js","Components/Filter/Filter.jsx","helpers/FiltersContacts.js","redux/slices/number.js","redux/slices/name.js","App.js","redux/store/index.js","index.js"],"names":["module","exports","Container","children","className","css","container","Section","title","section","toLowerCase","fetchContacts","createAsyncThunk","a","axios","get","result","data","addContact","contact","post","deleteContact","id","delete","contactsSlice","createSlice","name","initialState","items","status","error","extraReducers","fulfilled","state","action","payload","pending","rejected","message","console","log","filter","PhoneBookListItem","number","dispatch","useDispatch","onClick","PhoneBookList","contacts","map","PhoneBookEditor","handleAddNewContact","handleChangeInput","useSelector","onSubmit","type","value","pattern","required","style","display","marginBottom","onChange","filterSlice","reducers","setFilter","actions","Filter","filterValue","e","target","placeholder","FilterContacts","obj","includes","trim","numberSlice","setNumber","nameSlice","setName","App","useEffect","contactsArray","preventDefault","some","el","alert","newContact","nanoid","rootReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,2B,uICIbC,MAJf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,qBAAKC,UAAWC,IAAIC,UAApB,SAAgCH,K,iBCkB1BI,I,EAAAA,EAlBf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOL,EAAY,EAAZA,SACxB,OACE,0BAASC,UAAWC,IAAII,QAAxB,UAC2B,cAAxBD,EAAME,cACL,6BAAKF,IAEL,6BAAKA,IAENL,M,6DCPMQ,EAAgBC,YAC3B,yBAD2C,sBAE3C,4BAAAC,EAAA,sEACuBC,IAAMC,IAAI,kCADjC,cACQC,EADR,yBAESA,EAAOC,MAFhB,4CAMWC,EAAaN,YACxB,sBADwC,uCAExC,WAAOO,GAAP,eAAAN,EAAA,sEACuBC,IAAMM,KAAK,iCAAkCD,GADpE,cACQH,EADR,yBAESA,EAAOC,MAFhB,2CAFwC,uDAQ7BI,EAAgBT,YAC3B,yBAD2C,uCAE3C,WAAOU,GAAP,SAAAT,EAAA,sEACQC,IAAMS,OAAN,yCAA+CD,IADvD,gCAESA,GAFT,2CAF2C,uDAyD9BE,EAjDOC,YAAY,CAChCC,KAAM,WAENC,aAAc,CACZC,MAAO,GACPC,OAAQ,KACRC,MAAO,MAQTC,eAAa,mBACVpB,EAAcqB,WAAY,SAACC,EAAOC,GACjCD,EAAML,MAAN,YAAkBM,EAAOC,SACzBF,EAAMJ,OAAS,KACfI,EAAMH,MAAQ,QAJL,cAMVnB,EAAcyB,SAAU,SAACH,EAAOC,GAC/BD,EAAMJ,OAAS,aAPN,cASVlB,EAAc0B,UAAW,SAACJ,EAAOC,GAChCD,EAAMJ,OAAS,KACfI,EAAMH,MAAQI,EAAOJ,MAAMQ,QAC3BC,QAAQC,IAAIP,EAAMH,UAZT,cAcVZ,EAAWc,WAAY,SAACC,EAAOC,GAC9BD,EAAML,MAAN,sBAAkBK,EAAML,OAAxB,CAA+BM,EAAOC,UACtCF,EAAMJ,OAAS,KACfI,EAAMH,MAAQ,QAjBL,cAmBVZ,EAAWkB,SAAU,SAACH,EAAOC,GAC5BD,EAAMJ,OAAS,UACfI,EAAMH,MAAQ,QArBL,cAuBVZ,EAAWmB,UAAW,SAACJ,EAAOC,GAC7BD,EAAMJ,OAAS,KACfI,EAAMH,MAAQ,WAzBL,cA2BVT,EAAcW,WAAY,SAACC,EAAOC,GACjCD,EAAML,MAAQK,EAAML,MAAMa,QACxB,SAACtB,GAAD,OAAaA,EAAQG,KAAOY,EAAOC,cA7B5B,KAmCf,QC9CeO,MA1Bf,YAAkD,IAArBpB,EAAoB,EAApBA,GAAII,EAAgB,EAAhBA,KAAMiB,EAAU,EAAVA,OAC/BC,EAAWC,cAKjB,OACE,+BACE,gCACE,oBAAGzC,UAAU,cAAb,mBAAkCsB,KAClC,yCAAYiB,QAEd,wBAAQG,QATO,WACjBF,EAASvB,EAAcC,KAQQA,GAAIA,EAAjC,sBALOA,ICGEyB,MAbf,YAAsC,IAAbC,EAAY,EAAZA,SACvB,OACE,6BACGA,GACCA,EAASC,KAAI,YAA2B,IAAxBvB,EAAuB,EAAvBA,KAAMiB,EAAiB,EAAjBA,OAAQrB,EAAS,EAATA,GAC5B,OACE,cAAC,EAAD,CAA4BI,KAAMA,EAAMiB,OAAQA,EAAQrB,GAAIA,GAApCA,SCiDrB4B,MApDf,YAAsE,IAA3CC,EAA0C,EAA1CA,oBAAqBC,EAAqB,EAArBA,kBACxCT,EAASU,aAAY,SAACpB,GAAD,OAAWA,EAAMU,UACtCjB,EAAO2B,aAAY,SAACpB,GAAD,OAAWA,EAAMP,QAE1C,OACE,8BACE,uBAAM4B,SAAUH,EAAhB,UACE,yCAEE,uBACEI,KAAK,OACL7B,KAAK,OACL8B,MAAO9B,EACP+B,QAAQ,yHACRjD,MAAM,kcACNkD,UAAQ,EACRC,MAAO,CACLC,QAAS,QACTC,aAAc,QAEhBC,SAAUV,OAId,2CAEE,uBACEG,KAAK,MACL7B,KAAK,SACL8B,MAAOb,EACPc,QAAQ,yFACRjD,MAAM,giBACNkD,UAAQ,EACRC,MAAO,CACLC,QAAS,QACTC,aAAc,QAEhBC,SAAUV,OAId,wBAAQG,KAAK,SAAb,+BC3CFQ,EAActC,YAAY,CAC9BC,KAAM,SACNC,aAAc,GACdqC,SAAU,CACRC,UAAW,SAAChC,EAAOC,GAAR,OAAmBA,EAAOC,YAI1B8B,EAAcF,EAAYG,QAA1BD,UACAF,IAAf,QCkBeI,MAvBf,WACE,IAAMvB,EAAWC,cAMXuB,EAAcf,aAAY,SAACpB,GAAD,OAAWA,EAAMQ,UACjD,OACE,iDAEE,uBACEc,KAAK,OACLO,SAVgB,SAACO,GACrBzB,EAASqB,EAAUI,EAAEC,OAAOd,SAUxB9B,KAAK,SACL8B,MAAOY,EACP5D,MAAM,oSACN+D,YAAY,aCdLC,MAPf,SAAwBxB,GACtB,IAAMoB,EAAcf,aAAY,SAACpB,GAAD,OAAWA,EAAMQ,UACjD,OAAOO,EAASP,QAAO,SAACgC,GACtB,OAAOA,EAAI/C,KAAKhB,cAAcgE,SAASN,EAAY1D,cAAciE,YCH/DC,EAAcnD,YAAY,CAC9BC,KAAM,SACNC,aAAc,GACdqC,SAAU,CACRa,UAAW,SAAC5C,EAAOC,GAAR,OAAmBA,EAAOC,YAI1B0C,EAAcD,EAAYV,QAA1BW,UACAD,IAAf,QCTME,EAAYrD,YAAY,CAC5BC,KAAM,OACNC,aAAc,GACdqC,SAAU,CACRe,QAAS,SAAC9C,EAAOC,GAAR,OAAmBA,EAAOC,YAIxB4C,EAAYD,EAAUZ,QAAtBa,QACAD,IAAf,Q,MCMe,SAASE,IACtB,IAAMhC,EAAWK,aAAY,SAACpB,GAAD,OAAWA,EAAMe,SAASpB,SACjDe,EAASU,aAAY,SAACpB,GAAD,OAAWA,EAAMU,UACtCjB,EAAO2B,aAAY,SAACpB,GAAD,OAAWA,EAAMP,QACpCkB,EAAWC,cAEjBoC,qBAAU,WACRrC,EAASjC,OACR,CAACiC,IAIJ,IAwCMsC,EAAgBV,EAAexB,GACrC,OACE,qBAAK5C,UAAU,MAAf,SACE,cAAC,EAAD,UACE,eAAC,EAAD,CAASI,MAAO,YAAhB,UACE,cAAC,EAAD,CAASA,MAAO,kBAAhB,SACE,cAAC,EAAD,CACE2C,oBAhCgB,SAACkB,GAG3B,GAFAA,EAAEc,iBAEEnC,EAASoC,MAAK,SAACC,GAAD,OAAQA,EAAG3D,OAASA,KACpC4D,MAAM,GAAD,OAAI5D,EAAJ,gCADP,CAKA,IAAI6D,EAAa,CACf7D,KAAMA,EACNiB,OAAQA,EACRrB,GAAIkE,eAGN5C,EAAS1B,EAAWqE,IAGpB3C,EAASmC,EAAQ,KACjBnC,EAASiC,EAAU,OAeTzB,kBAhDc,SAACiB,GACzB,MAAwBA,EAAEC,OAAlB5C,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,MAEd,OAAQ9B,GACN,IAAK,OACH,OAAOkB,EAASmC,EAAQvB,IAE1B,IAAK,SACH,OAAOZ,EAASiC,EAAUrB,IAE5B,QACE,aAwCE,eAAC,EAAD,CAAShD,MAAO,WAAhB,UACE,cAAC,EAAD,IAGA,cAAC,EAAD,CAAewC,SAAUkC,cC7ErC,IAAMO,EAAc,CAClBhD,SACAO,WACAL,SACAjB,QAQagE,EALDC,YAAe,CAC3BC,QAASH,ICRXI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.0e2c8135.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3e1Mh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__snUHO\"};","import css from \"./Container.module.css\";\nfunction Container({ children }) {\n  return <div className={css.container}>{children}</div>;\n}\n\nexport default Container;\n","import PropTypes from \"prop-types\";\nimport css from \"./Section.module.css\";\nfunction Section({ title, children }) {\n  return (\n    <section className={css.section}>\n      {title.toLowerCase() === \"phonebook\" ? (\n        <h1>{title}</h1>\n      ) : (\n        <h2>{title}</h2>\n      )}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchContacts = createAsyncThunk(\n  \"contacts/fetchContacts\",\n  async () => {\n    const result = await axios.get(\"http://localhost:7777/contacts\");\n    return result.data;\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  \"contacts/setContact\",\n  async (contact) => {\n    const result = await axios.post(\"http://localhost:7777/contacts\", contact);\n    return result.data;\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  \"contacts/deleteContact\",\n  async (id) => {\n    await axios.delete(`http://localhost:7777/contacts/${id}`);\n    return id;\n  }\n);\n\nconst contactsSlice = createSlice({\n  name: \"contacts\",\n  // initialState: initialState(),\n  initialState: {\n    items: [],\n    status: null,\n    error: null,\n  },\n\n  // reducers: {\n  //   setContact: (state, action) => [...state, action.payload],\n  //   deleteContact: (state, action) =>\n  //     state.filter((contact) => contact.id !== action.payload),\n  // },\n  extraReducers: {\n    [fetchContacts.fulfilled]: (state, action) => {\n      state.items = [...action.payload];\n      state.status = null;\n      state.error = null;\n    },\n    [fetchContacts.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchContacts.rejected]: (state, action) => {\n      state.status = null;\n      state.error = action.error.message;\n      console.log(state.error);\n    },\n    [addContact.fulfilled]: (state, action) => {\n      state.items = [...state.items, action.payload];\n      state.status = null;\n      state.error = null;\n    },\n    [addContact.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.error = null;\n    },\n    [addContact.rejected]: (state, action) => {\n      state.status = null;\n      state.error = \"Error\";\n    },\n    [deleteContact.fulfilled]: (state, action) => {\n      state.items = state.items.filter(\n        (contact) => contact.id !== action.payload\n      );\n    },\n  },\n});\n\nexport default contactsSlice.reducer;\n","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/slices/contacts\";\n\nfunction PhoneBookListItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  const deleteItem = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <li key={id}>\n      <div>\n        <p className=\"ContactName\">Name: {name}</p>\n        <p>Number: {number}</p>\n      </div>\n      <button onClick={deleteItem} id={id}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nPhoneBookListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  // onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default PhoneBookListItem;\n","import PhoneBookListItem from \"../PhoneBookListItem/PhoneBookListItem\";\nfunction PhoneBookList({ contacts }) {\n  return (\n    <ul>\n      {contacts &&\n        contacts.map(({ name, number, id }) => {\n          return (\n            <PhoneBookListItem key={id} name={name} number={number} id={id} />\n          );\n        })}\n    </ul>\n  );\n}\n\nexport default PhoneBookList;\n","import PropTypes from \"prop-types\";\n// import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nfunction PhoneBookEditor({ handleAddNewContact, handleChangeInput }) {\n  const number = useSelector((state) => state.number);\n  const name = useSelector((state) => state.name);\n  // const dispatch = useDispatch();\n  return (\n    <div>\n      <form onSubmit={handleAddNewContact}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            style={{\n              display: \"block\",\n              marginBottom: \"10px\",\n            }}\n            onChange={handleChangeInput}\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            style={{\n              display: \"block\",\n              marginBottom: \"10px\",\n            }}\n            onChange={handleChangeInput}\n          />\n        </label>\n\n        <button type=\"submit\">Add Contact</button>\n      </form>\n    </div>\n  );\n}\n\nPhoneBookEditor.propTypes = {\n  handleChangeInput: PropTypes.func.isRequired,\n  handleAddNewContact: PropTypes.func.isRequired,\n};\n\nexport default PhoneBookEditor;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterSlice = createSlice({\n  name: \"filter\",\n  initialState: \"\",\n  reducers: {\n    setFilter: (state, action) => action.payload,\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport default filterSlice.reducer;\n","// import { isCompositeComponentWithType } from \"react-dom/test-utils\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nimport { setFilter } from \"../../redux/slices/filter\";\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const setFilterName = (e) => {\n    dispatch(setFilter(e.target.value));\n  };\n  // console.log(setFilterName);\n  const filterValue = useSelector((state) => state.filter);\n  return (\n    <label>\n      Find Contact\n      <input\n        type=\"text\"\n        onChange={setFilterName}\n        name=\"filter\"\n        value={filterValue}\n        title=\"Введіть, будь ласка, ім'я, або прізвище людини, яку шукаєте\"\n        placeholder=\"Name\"\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import { useSelector } from \"react-redux\";\n\nfunction FilterContacts(contacts) {\n  const filterValue = useSelector((state) => state.filter);\n  return contacts.filter((obj) => {\n    return obj.name.toLowerCase().includes(filterValue.toLowerCase().trim());\n  });\n}\n\nexport default FilterContacts;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst numberSlice = createSlice({\n  name: \"number\",\n  initialState: \"\",\n  reducers: {\n    setNumber: (state, action) => action.payload,\n  },\n});\n\nexport const { setNumber } = numberSlice.actions;\nexport default numberSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst nameSlice = createSlice({\n  name: \"name\",\n  initialState: \"\",\n  reducers: {\n    setName: (state, action) => action.payload,\n  },\n});\n\nexport const { setName } = nameSlice.actions;\nexport default nameSlice.reducer;\n","import { useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nimport Container from \"./Components/Container/\";\nimport Section from \"./Components/Section\";\nimport PhoneBookList from \"./Components/PhoneBookList\";\nimport PhoneBookEditor from \"./Components/PhoneBookEditor\";\nimport Filter from \"./Components/Filter\";\nimport FilterContacts from \"./helpers/FiltersContacts\";\nimport { addContact, fetchContacts } from \"./redux/slices/contacts\";\nimport { setNumber } from \"./redux/slices/number\";\nimport { setName } from \"./redux/slices/name\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  const contacts = useSelector((state) => state.contacts.items);\n  const number = useSelector((state) => state.number);\n  const name = useSelector((state) => state.name);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // dispatch(fetchContacts());\n\n  const handleChangeInput = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        return dispatch(setName(value));\n\n      case \"number\":\n        return dispatch(setNumber(value));\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddNewContact = (e) => {\n    e.preventDefault();\n\n    if (contacts.some((el) => el.name === name)) {\n      alert(`${name} has alredy be declared`);\n      return;\n    }\n\n    let newContact = {\n      name: name,\n      number: number,\n      id: nanoid(),\n    };\n\n    dispatch(addContact(newContact));\n\n    // setContacts((prevState) => [...prevState, newContact]);\n    dispatch(setName(\"\"));\n    dispatch(setNumber(\"\"));\n  };\n\n  // const onDeleteContact = (e) => {\n  //   setContact(() => contacts.filter((el) => el.id !== e.target.id));\n  // };\n\n  const contactsArray = FilterContacts(contacts);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Section title={\"Phonebook\"}>\n          <Section title={\"Add new contact\"}>\n            <PhoneBookEditor\n              handleAddNewContact={handleAddNewContact}\n              handleChangeInput={handleChangeInput}\n            />\n          </Section>\n          <Section title={\"Contacts\"}>\n            <Filter\n            // onChange={handleChangeInput} filterValue={filter}\n            />\n            <PhoneBookList contacts={contactsArray} />\n          </Section>\n        </Section>\n      </Container>\n    </div>\n  );\n}\n\n// THE CODE IS WRITTEN IN CLASSES\n// import { Component } from \"react\";\n// import { nanoid } from \"nanoid\";\n\n// import Container from \"./Components/Container/\";\n// import Section from \"./Components/Section\";\n// import PhoneBookList from \"./Components/PhoneBookList\";\n// import PhoneBookEditor from \"./Components/PhoneBookEditor\";\n// import Filter from \"./Components/Filter\";\n// import filterContacts from \"./helpers/filtersContacts\";\n// import InitialContacts from \"./data/InitialContacts.json\";\n\n// import \"./App.css\";\n\n// class App extends Component {\n//   state = {\n//     contacts: InitialContacts,\n//     name: \"\",\n//     number: \"\",\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     // console.log(\"componentDidMount\");\n//     const contactsFromLocalStorage = localStorage.getItem(\"contacts\");\n//     // console.log(contactsFromLocalStorage);\n//     const parsedContactsFromLocalStorage = JSON.parse(contactsFromLocalStorage);\n//     console.log(parsedContactsFromLocalStorage);\n//     if (parsedContactsFromLocalStorage) {\n//       this.setState({ contacts: parsedContactsFromLocalStorage });\n//     }\n//     // const contacts =\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     // console.log(\"componentDidUpdate\");\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log(\"Обновилося поле contacts\");\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   handleChangeInput = (e) => {\n//     this.setState({\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   handleAddNewContact = (e) => {\n//     e.preventDefault();\n\n//     const { contacts, name, number } = this.state;\n//     if (contacts.some((el) => el.name === name)) {\n//       alert(`${name} has alredy be declared`);\n//       return;\n//     }\n\n//     let contact = {\n//       name: name,\n//       number: number,\n//       id: nanoid(),\n//     };\n\n//     this.setState((prevState) => ({\n//       contacts: [...prevState.contacts, contact],\n//       name: \"\",\n//       number: \"\",\n//     }));\n//   };\n\n//   onDeleteContact = (e) => {\n//     const { contacts } = this.state;\n//     this.setState({\n//       contacts: contacts.filter((el) => el.id !== e.target.id),\n//     });\n//   };\n\n//   handleChangeFilter = (e) => {\n//     this.setState({\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   render() {\n//     const contacts = filterContacts(this.state.contacts, this.state.filter);\n//     const { name, number, filter } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <Container>\n//           <Section title={\"Phonebook\"}>\n//             <Section title={\"Add new contact\"}>\n//               <PhoneBookEditor\n//                 name={name}\n//                 number={number}\n//                 handleAddNewContact={this.handleAddNewContact}\n//                 handleChangeInput={this.handleChangeInput}\n//               />\n//             </Section>\n//             <Section title={\"Contacts\"}>\n//               <Filter onChange={this.handleChangeFilter} filterValue={filter} />\n//               <PhoneBookList\n//                 contacts={contacts}\n//                 onDeleteContact={this.onDeleteContact}\n//               />\n//             </Section>\n//           </Section>\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport filter from \"../slices/filter\";\nimport contacts from \"../slices/contacts\";\nimport number from \"../slices/number\";\nimport name from \"../slices/name\";\n\nconst rootReducer = {\n  filter,\n  contacts,\n  number,\n  name,\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n  // devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}